{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\phili\\\\Projetos\\\\MAmanager\\\\Components\\\\MensalidadesResumo.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport dayjs from 'dayjs';\n\nvar MensalidadesResumo = function MensalidadesResumo() {\n  _s();\n\n  var cdate = new Date();\n  var primeiroDia = new Date(cdate.getFullYear(), cdate.getMonth(), 1);\n  var ultimoDia = new Date(cdate.getFullYear(), cdate.getMonth() + 1, 0);\n  console.log(primeiroDia);\n  console.log(ultimoDia);\n  primeiroDia = dayjs(primeiroDia).format('YYYY-MM-DD');\n  ultimoDia = dayjs(ultimoDia).format('YYYY-MM-DD');\n  console.log(primeiroDia);\n  console.log(ultimoDia);\n\n  var _useFormik = useFormik({\n    initialValues: {\n      idate: primeiroDia,\n      fdate: ultimoDia\n    },\n    validationSchema: Yup.object({\n      idate: Yup.date().required('Obrigatório'),\n      fdate: Yup.date().required('Obrigatório')\n    }),\n    onSubmit: function onSubmit(values) {\n      salvarAluno(values, props.user.email);\n    }\n  }),\n      handleSubmit = _useFormik.handleSubmit,\n      handleChange = _useFormik.handleChange,\n      values = _useFormik.values,\n      touched = _useFormik.touched,\n      errors = _useFormik.errors;\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Mensalidades\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Resumo das Mensalidades\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(\"input\", {\n      value: values.idate,\n      onChange: handleChange,\n      type: \"date\",\n      id: \"idate\",\n      name: \"idate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, _this), touched.idate && errors.idate ? /*#__PURE__*/_jsxDEV(\"text\", {\n      children: errors.idate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 40\n    }, _this) : null, /*#__PURE__*/_jsxDEV(\"input\", {\n      value: values.fdate,\n      onChange: handleChange,\n      type: \"date\",\n      id: \"fdate\",\n      name: \"fdate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, _this), touched.fdate && errors.fdate ? /*#__PURE__*/_jsxDEV(\"text\", {\n      children: errors.fdate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 40\n    }, _this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(MensalidadesResumo, \"G2gPppaHxabIZCEXmdxIpxNZY1g=\", false, function () {\n  return [useFormik];\n});\n\n_c = MensalidadesResumo;\nexport default MensalidadesResumo;\nexport function getServerSideProps(_x) {\n  return _getServerSideProps.apply(this, arguments);\n}\n\nfunction _getServerSideProps() {\n  _getServerSideProps = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n    var req, res, session, data, alunosDB, alunos, errors;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            req = _ref.req, res = _ref.res;\n            _context.next = 3;\n            return auth0.getSession(req);\n\n          case 3:\n            session = _context.sent;\n\n            if (!session) {\n              _context.next = 15;\n              break;\n            }\n\n            _context.next = 7;\n            return fetch('http://localhost:3001/graphql', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json',\n                Accept: 'application/json',\n                Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjbGllbnQiOiJmcm9udC1lbmQtS2U0Z3JnNzRocjRkY2I2IiwiaWF0IjoxNTk3ODU3NTg2fQ.MVQIQxXkVgbhCFzYRwIiAtJZHbYN0UqiJGBndMLKAGY'\n              },\n              body: JSON.stringify({\n                query: \"{ \\n          findAllAlunos(user: \\\"\".concat(session.user.email, \"\\\") {\\n            id\\n            aluno\\n            birthDate\\n            dueDate\\n            gender\\n            location\\n        } }\")\n              })\n            });\n\n          case 7:\n            data = _context.sent;\n            _context.next = 10;\n            return data.json();\n\n          case 10:\n            alunosDB = _context.sent;\n            alunos = alunosDB.data;\n            errors = null;\n\n            if (alunosDB.errors) {\n              errors = alunosDB.errors;\n            }\n\n            return _context.abrupt(\"return\", {\n              props: {\n                errors: errors,\n                user: session.user,\n                data: alunos\n              }\n            });\n\n          case 15:\n            return _context.abrupt(\"return\", {\n              props: {\n                user: 'Usuário não logado',\n                data: 'Dados inacessíveis'\n              }\n            });\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getServerSideProps.apply(this, arguments);\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"MensalidadesResumo\");","map":{"version":3,"sources":["C:/Users/phili/Projetos/MAmanager/Components/MensalidadesResumo.js"],"names":["useFormik","Yup","dayjs","MensalidadesResumo","cdate","Date","primeiroDia","getFullYear","getMonth","ultimoDia","console","log","format","initialValues","idate","fdate","validationSchema","object","date","required","onSubmit","values","salvarAluno","props","user","email","handleSubmit","handleChange","touched","errors","getServerSideProps","req","res","auth0","getSession","session","fetch","method","headers","Accept","Authorization","body","JSON","stringify","query","data","json","alunosDB","alunos"],"mappings":"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","sourcesContent":["import { useFormik } from 'formik'\r\nimport * as Yup from 'yup'\r\nimport dayjs from 'dayjs'\r\n\r\nconst MensalidadesResumo = () => {\r\n  const cdate = new Date();\r\n  let primeiroDia = new Date(cdate.getFullYear(), cdate.getMonth(), 1);\r\n  let ultimoDia = new Date(cdate.getFullYear(), cdate.getMonth() + 1, 0);\r\n  console.log(primeiroDia)\r\n  console.log(ultimoDia)\r\n  primeiroDia = dayjs(primeiroDia).format('YYYY-MM-DD')\r\n  ultimoDia = dayjs(ultimoDia).format('YYYY-MM-DD')\r\n  console.log(primeiroDia)\r\n  console.log(ultimoDia)\r\n  const { handleSubmit, handleChange, values, touched, errors } = useFormik({\r\n    initialValues: {\r\n      idate: primeiroDia,\r\n      fdate: ultimoDia\r\n    },\r\n    validationSchema: Yup.object({\r\n      idate: Yup.date().required('Obrigatório'),\r\n      fdate: Yup.date().required('Obrigatório')\r\n    }),\r\n    onSubmit: (values) => {\r\n      salvarAluno(values, props.user.email)\r\n    }\r\n  })\r\n  return (\r\n    <div>\r\n      <h3>Mensalidades</h3>\r\n      <p>Resumo das Mensalidades</p>\r\n      <input\r\n        value={values.idate}\r\n        onChange={handleChange}\r\n        type=\"date\"\r\n        id=\"idate\"\r\n        name=\"idate\"\r\n      />\r\n      {touched.idate && errors.idate ? <text>{errors.idate}</text> : null}\r\n      <input\r\n        value={values.fdate}\r\n        onChange={handleChange}\r\n        type=\"date\"\r\n        id=\"fdate\"\r\n        name=\"fdate\"\r\n      />\r\n      {touched.fdate && errors.fdate ? <text>{errors.fdate}</text> : null}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MensalidadesResumo\r\n\r\nexport async function getServerSideProps({ req, res }) {\r\n  const session = await auth0.getSession(req)\r\n  if (session) {\r\n    const data = await fetch('http://localhost:3001/graphql', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Accept: 'application/json',\r\n        Authorization:\r\n          'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjbGllbnQiOiJmcm9udC1lbmQtS2U0Z3JnNzRocjRkY2I2IiwiaWF0IjoxNTk3ODU3NTg2fQ.MVQIQxXkVgbhCFzYRwIiAtJZHbYN0UqiJGBndMLKAGY',\r\n      },\r\n      body: JSON.stringify({\r\n        query: `{ \r\n          findAllAlunos(user: \"${session.user.email}\") {\r\n            id\r\n            aluno\r\n            birthDate\r\n            dueDate\r\n            gender\r\n            location\r\n        } }`,\r\n      }),\r\n    })\r\n    const alunosDB = await data.json()\r\n    const alunos = alunosDB.data\r\n    let errors = null\r\n    if (alunosDB.errors) {\r\n      errors = alunosDB.errors\r\n    }\r\n\r\n    return {\r\n      props: {\r\n        errors,\r\n        user: session.user,\r\n        data: alunos,\r\n      },\r\n    }\r\n  }\r\n  return {\r\n    props: {\r\n      user: 'Usuário não logado',\r\n      data: 'Dados inacessíveis'\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}