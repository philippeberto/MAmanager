{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport dayjs from 'dayjs';\nvar cdate = new Date();\nvar firstDay = new Date(cdate.getFullYear(), cdate.getMonth(), 1);\nvar lastDay = new Date(cdate.getFullYear(), cdate.getMonth() + 1, 0);\nfirstDay = dayjs(firstDay).format('YYYY-MM-DD');\nlastDay = dayjs(lastDay).format('YYYY-MM-DD');\nvar data = await fetch('http://localhost:3001/graphql', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjbGllbnQiOiJmcm9udC1lbmQtS2U0Z3JnNzRocjRkY2I2IiwiaWF0IjoxNTk3ODU3NTg2fQ.MVQIQxXkVgbhCFzYRwIiAtJZHbYN0UqiJGBndMLKAGY'\n  },\n  body: JSON.stringify({\n    query: \"{\\n        findMensalidadesByPeriod(user:\\\"philippe.bjj@gmail.com\\\",input:{\\n          idate: \\\"2020-11-01\\\"\\n          fdate: \\\"2020-11-30\\\"\\n        })\\n      }\"\n  })\n});\nvar mensalidadesDB = await data.json();\nvar mensalidades = parseInt(mensalidadesDB.data.findMensalidadesByPeriod);\nconsole.log(mensalidades);\n\nvar MensalidadesResumo = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", 120);\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function MensalidadesResumo() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\n_c = MensalidadesResumo;\nexport default MensalidadesResumo;\n\nvar _c;\n\n$RefreshReg$(_c, \"MensalidadesResumo\");","map":{"version":3,"sources":["C:/Users/phili/Projetos/MAmanager/Components/MensalidadesResumo.js"],"names":["dayjs","cdate","Date","firstDay","getFullYear","getMonth","lastDay","format","data","fetch","method","headers","Accept","Authorization","body","JSON","stringify","query","mensalidadesDB","json","mensalidades","parseInt","findMensalidadesByPeriod","console","log","MensalidadesResumo"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,IAAMC,KAAK,GAAG,IAAIC,IAAJ,EAAd;AACA,IAAIC,QAAQ,GAAG,IAAID,IAAJ,CAASD,KAAK,CAACG,WAAN,EAAT,EAA8BH,KAAK,CAACI,QAAN,EAA9B,EAAgD,CAAhD,CAAf;AACA,IAAIC,OAAO,GAAG,IAAIJ,IAAJ,CAASD,KAAK,CAACG,WAAN,EAAT,EAA8BH,KAAK,CAACI,QAAN,KAAmB,CAAjD,EAAoD,CAApD,CAAd;AACAF,QAAQ,GAAGH,KAAK,CAACG,QAAD,CAAL,CAAgBI,MAAhB,CAAuB,YAAvB,CAAX;AACAD,OAAO,GAAGN,KAAK,CAACM,OAAD,CAAL,CAAeC,MAAf,CAAsB,YAAtB,CAAV;AACA,IAAMC,IAAI,GAAG,MAAMC,KAAK,CAAC,+BAAD,EAAkC;AACxDC,EAAAA,MAAM,EAAE,MADgD;AAExDC,EAAAA,OAAO,EAAE;AACP,oBAAgB,kBADT;AAEPC,IAAAA,MAAM,EAAE,kBAFD;AAGPC,IAAAA,aAAa,EACX;AAJK,GAF+C;AAQxDC,EAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,IAAAA,KAAK;AADc,GAAf;AARkD,CAAlC,CAAxB;AAiBA,IAAMC,cAAc,GAAG,MAAMV,IAAI,CAACW,IAAL,EAA7B;AACA,IAAMC,YAAY,GAAGC,QAAQ,CAACH,cAAc,CAACV,IAAf,CAAoBc,wBAArB,CAA7B;AACAC,OAAO,CAACC,GAAR,CAAYJ,YAAZ;;AAEA,IAAMK,kBAAkB;AAAA,sEAAG;AAAA;AAAA;AAAA;AAAA;AAAA,6CAElB,GAFkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAlBA,kBAAkB;AAAA;AAAA;AAAA,GAAxB;;KAAMA,kB;AAKN,eAAeA,kBAAf","sourcesContent":["import dayjs from 'dayjs'\r\n\r\nconst cdate = new Date();\r\nlet firstDay = new Date(cdate.getFullYear(), cdate.getMonth(), 1);\r\nlet lastDay = new Date(cdate.getFullYear(), cdate.getMonth() + 1, 0);\r\nfirstDay = dayjs(firstDay).format('YYYY-MM-DD')\r\nlastDay = dayjs(lastDay).format('YYYY-MM-DD')\r\nconst data = await fetch('http://localhost:3001/graphql', {\r\n  method: 'POST',\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n    Accept: 'application/json',\r\n    Authorization:\r\n      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjbGllbnQiOiJmcm9udC1lbmQtS2U0Z3JnNzRocjRkY2I2IiwiaWF0IjoxNTk3ODU3NTg2fQ.MVQIQxXkVgbhCFzYRwIiAtJZHbYN0UqiJGBndMLKAGY',\r\n  },\r\n  body: JSON.stringify({\r\n    query: `{\r\n        findMensalidadesByPeriod(user:\"philippe.bjj@gmail.com\",input:{\r\n          idate: \"2020-11-01\"\r\n          fdate: \"2020-11-30\"\r\n        })\r\n      }`,\r\n  }),\r\n})\r\nconst mensalidadesDB = await data.json()\r\nconst mensalidades = parseInt(mensalidadesDB.data.findMensalidadesByPeriod)\r\nconsole.log(mensalidades)\r\n\r\nconst MensalidadesResumo = async () => {\r\n\r\n  return 120\r\n}\r\n\r\nexport default MensalidadesResumo\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}