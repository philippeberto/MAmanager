{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport dayjs from 'dayjs';\n\nvar MensalidadesResumo = function MensalidadesResumo(props) {\n  console.log(props.data);\n  return 120;\n};\n\n_c = MensalidadesResumo;\nexport default MensalidadesResumo;\nexport function getServerSideProps(_x) {\n  return _getServerSideProps.apply(this, arguments);\n}\n\nfunction _getServerSideProps() {\n  _getServerSideProps = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n    var req, res, session, cdate, firstDay, lastDay, data, mensalidadesDB, mensalidades, errors;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            req = _ref.req, res = _ref.res;\n            _context.next = 3;\n            return auth0.getSession(req);\n\n          case 3:\n            session = _context.sent;\n\n            if (!session) {\n              _context.next = 24;\n              break;\n            }\n\n            cdate = new Date();\n            firstDay = new Date(cdate.getFullYear(), cdate.getMonth(), 1);\n            lastDay = new Date(cdate.getFullYear(), cdate.getMonth() + 1, 0);\n            firstDay = dayjs(firstDay).format('YYYY-MM-DD');\n            lastDay = dayjs(lastDay).format('YYYY-MM-DD');\n            _context.next = 12;\n            return fetch('http://localhost:3001/graphql', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json',\n                Accept: 'application/json',\n                Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjbGllbnQiOiJmcm9udC1lbmQtS2U0Z3JnNzRocjRkY2I2IiwiaWF0IjoxNTk3ODU3NTg2fQ.MVQIQxXkVgbhCFzYRwIiAtJZHbYN0UqiJGBndMLKAGY'\n              },\n              body: JSON.stringify({\n                query: \"{\\n          findMensalidadesByPeriod(user:\\\"philippe.bjj@gmail.com\\\",input:{\\n            idate: \\\"2020-11-01\\\"\\n            fdate: \\\"2020-11-30\\\"\\n          })\\n        }\"\n              })\n            });\n\n          case 12:\n            data = _context.sent;\n            _context.next = 15;\n            return data.json();\n\n          case 15:\n            mensalidadesDB = _context.sent;\n            mensalidades = parseInt(mensalidadesDB.data.findMensalidadesByPeriod);\n            errors = null;\n\n            if (mensalidadesDB.errors) {\n              errors = mensalidadesDB.errors;\n            }\n\n            if (!mensalidades) {\n              _context.next = 23;\n              break;\n            }\n\n            return _context.abrupt(\"return\", {\n              props: {\n                errors: errors,\n                user: session.user,\n                data: mensalidades\n              }\n            });\n\n          case 23:\n            return _context.abrupt(\"return\", {\n              props: {\n                errors: errors,\n                user: session.user,\n                data: []\n              }\n            });\n\n          case 24:\n            return _context.abrupt(\"return\", {\n              props: {\n                user: 'Usuário não logado',\n                data: 'Dados inacessíveis'\n              }\n            });\n\n          case 25:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getServerSideProps.apply(this, arguments);\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"MensalidadesResumo\");","map":{"version":3,"sources":["C:/Users/phili/Projetos/MAmanager/Components/MensalidadesResumo.js"],"names":["dayjs","MensalidadesResumo","props","console","log","data","getServerSideProps","req","res","auth0","getSession","session","cdate","Date","firstDay","getFullYear","getMonth","lastDay","format","fetch","method","headers","Accept","Authorization","body","JSON","stringify","query","json","mensalidadesDB","mensalidades","parseInt","findMensalidadesByPeriod","errors","user"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,KAAD,EAAW;AAEpCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,IAAlB;AACA,SAAO,GAAP;AACD,CAJD;;KAAMJ,kB;AAMN,eAAeA,kBAAf;AAEA,gBAAsBK,kBAAtB;AAAA;AAAA;;;iFAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAoCC,YAAAA,GAApC,QAAoCA,GAApC,EAAyCC,GAAzC,QAAyCA,GAAzC;AAAA;AAAA,mBACiBC,KAAK,CAACC,UAAN,CAAiBH,GAAjB,CADjB;;AAAA;AACCI,YAAAA,OADD;;AAAA,iBAEDA,OAFC;AAAA;AAAA;AAAA;;AAGGC,YAAAA,KAHH,GAGW,IAAIC,IAAJ,EAHX;AAICC,YAAAA,QAJD,GAIY,IAAID,IAAJ,CAASD,KAAK,CAACG,WAAN,EAAT,EAA8BH,KAAK,CAACI,QAAN,EAA9B,EAAgD,CAAhD,CAJZ;AAKCC,YAAAA,OALD,GAKW,IAAIJ,IAAJ,CAASD,KAAK,CAACG,WAAN,EAAT,EAA8BH,KAAK,CAACI,QAAN,KAAmB,CAAjD,EAAoD,CAApD,CALX;AAMHF,YAAAA,QAAQ,GAAGd,KAAK,CAACc,QAAD,CAAL,CAAgBI,MAAhB,CAAuB,YAAvB,CAAX;AACAD,YAAAA,OAAO,GAAGjB,KAAK,CAACiB,OAAD,CAAL,CAAeC,MAAf,CAAsB,YAAtB,CAAV;AAPG;AAAA,mBAQgBC,KAAK,CAAC,+BAAD,EAAkC;AACxDC,cAAAA,MAAM,EAAE,MADgD;AAExDC,cAAAA,OAAO,EAAE;AACP,gCAAgB,kBADT;AAEPC,gBAAAA,MAAM,EAAE,kBAFD;AAGPC,gBAAAA,aAAa,EACX;AAJK,eAF+C;AAQxDC,cAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,gBAAAA,KAAK;AADc,eAAf;AARkD,aAAlC,CARrB;;AAAA;AAQGtB,YAAAA,IARH;AAAA;AAAA,mBAyB0BA,IAAI,CAACuB,IAAL,EAzB1B;;AAAA;AAyBGC,YAAAA,cAzBH;AA0BGC,YAAAA,YA1BH,GA0BkBC,QAAQ,CAACF,cAAc,CAACxB,IAAf,CAAoB2B,wBAArB,CA1B1B;AA2BCC,YAAAA,MA3BD,GA2BU,IA3BV;;AA4BH,gBAAIJ,cAAc,CAACI,MAAnB,EAA2B;AACzBA,cAAAA,MAAM,GAAGJ,cAAc,CAACI,MAAxB;AACD;;AA9BE,iBA+BCH,YA/BD;AAAA;AAAA;AAAA;;AAAA,6CAgCM;AACL5B,cAAAA,KAAK,EAAE;AACL+B,gBAAAA,MAAM,EAANA,MADK;AAELC,gBAAAA,IAAI,EAAEvB,OAAO,CAACuB,IAFT;AAGL7B,gBAAAA,IAAI,EAAEyB;AAHD;AADF,aAhCN;;AAAA;AAAA,6CAwCM;AACL5B,cAAAA,KAAK,EAAE;AACL+B,gBAAAA,MAAM,EAANA,MADK;AAELC,gBAAAA,IAAI,EAAEvB,OAAO,CAACuB,IAFT;AAGL7B,gBAAAA,IAAI,EAAE;AAHD;AADF,aAxCN;;AAAA;AAAA,6CAkDE;AACLH,cAAAA,KAAK,EAAE;AACLgC,gBAAAA,IAAI,EAAE,oBADD;AAEL7B,gBAAAA,IAAI,EAAE;AAFD;AADF,aAlDF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import dayjs from 'dayjs'\r\n\r\nconst MensalidadesResumo = (props) => {\r\n\r\n  console.log(props.data)\r\n  return 120\r\n}\r\n\r\nexport default MensalidadesResumo\r\n\r\nexport async function getServerSideProps({ req, res }) {\r\n  const session = await auth0.getSession(req)\r\n  if (session) {\r\n    const cdate = new Date();\r\n    let firstDay = new Date(cdate.getFullYear(), cdate.getMonth(), 1);\r\n    let lastDay = new Date(cdate.getFullYear(), cdate.getMonth() + 1, 0);\r\n    firstDay = dayjs(firstDay).format('YYYY-MM-DD')\r\n    lastDay = dayjs(lastDay).format('YYYY-MM-DD')\r\n    const data = await fetch('http://localhost:3001/graphql', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Accept: 'application/json',\r\n        Authorization:\r\n          'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjbGllbnQiOiJmcm9udC1lbmQtS2U0Z3JnNzRocjRkY2I2IiwiaWF0IjoxNTk3ODU3NTg2fQ.MVQIQxXkVgbhCFzYRwIiAtJZHbYN0UqiJGBndMLKAGY',\r\n      },\r\n      body: JSON.stringify({\r\n        query: `{\r\n          findMensalidadesByPeriod(user:\"philippe.bjj@gmail.com\",input:{\r\n            idate: \"2020-11-01\"\r\n            fdate: \"2020-11-30\"\r\n          })\r\n        }`,\r\n      }),\r\n    })\r\n    const mensalidadesDB = await data.json()\r\n    const mensalidades = parseInt(mensalidadesDB.data.findMensalidadesByPeriod)\r\n    let errors = null\r\n    if (mensalidadesDB.errors) {\r\n      errors = mensalidadesDB.errors\r\n    }\r\n    if (mensalidades) {\r\n      return {\r\n        props: {\r\n          errors,\r\n          user: session.user,\r\n          data: mensalidades,\r\n        },\r\n      }\r\n    } else {\r\n      return {\r\n        props: {\r\n          errors,\r\n          user: session.user,\r\n          data: [],\r\n        },\r\n      }\r\n    }\r\n  }\r\n\r\n  return {\r\n    props: {\r\n      user: 'Usuário não logado',\r\n      data: 'Dados inacessíveis',\r\n    },\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}