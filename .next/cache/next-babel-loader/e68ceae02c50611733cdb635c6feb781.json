{"ast":null,"code":"import dayjs from 'dayjs';\n\nconst MensalidadesResumo = props => {\n  console.log(mensalidades);\n  return 120;\n};\n\nexport default MensalidadesResumo;\nexport async function getServerSideProps({\n  req,\n  res\n}) {\n  const session = await auth0.getSession(req);\n\n  if (session) {\n    const cdate = new Date();\n    let firstDay = new Date(cdate.getFullYear(), cdate.getMonth(), 1);\n    let lastDay = new Date(cdate.getFullYear(), cdate.getMonth() + 1, 0);\n    firstDay = dayjs(firstDay).format('YYYY-MM-DD');\n    lastDay = dayjs(lastDay).format('YYYY-MM-DD');\n    const data = await fetch('http://localhost:3001/graphql', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n        Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjbGllbnQiOiJmcm9udC1lbmQtS2U0Z3JnNzRocjRkY2I2IiwiaWF0IjoxNTk3ODU3NTg2fQ.MVQIQxXkVgbhCFzYRwIiAtJZHbYN0UqiJGBndMLKAGY'\n      },\n      body: JSON.stringify({\n        query: `{\n          findMensalidadesByPeriod(user:\"philippe.bjj@gmail.com\",input:{\n            idate: \"2020-11-01\"\n            fdate: \"2020-11-30\"\n          })\n        }`\n      })\n    });\n    const mensalidadesDB = await data.json();\n    const mensalidades = parseInt(mensalidadesDB.data.findMensalidadesByPeriod);\n    let errors = null;\n\n    if (mensalidadesDB.errors) {\n      errors = mensalidadesDB.errors;\n    }\n\n    if (mensalidades) {\n      return {\n        props: {\n          errors,\n          user: session.user,\n          data: mensalidades\n        }\n      };\n    } else {\n      return {\n        props: {\n          errors,\n          user: session.user,\n          data: []\n        }\n      };\n    }\n  }\n\n  return {\n    props: {\n      user: 'Usuário não logado',\n      data: 'Dados inacessíveis'\n    }\n  };\n}","map":{"version":3,"sources":["C:/Users/phili/Projetos/MAmanager/Components/MensalidadesResumo.js"],"names":["dayjs","MensalidadesResumo","props","console","log","mensalidades","getServerSideProps","req","res","session","auth0","getSession","cdate","Date","firstDay","getFullYear","getMonth","lastDay","format","data","fetch","method","headers","Accept","Authorization","body","JSON","stringify","query","mensalidadesDB","json","parseInt","findMensalidadesByPeriod","errors","user"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,kBAAkB,GAAIC,KAAD,IAAW;AAEpCC,EAAAA,OAAO,CAACC,GAAR,CAAYC,YAAZ;AACA,SAAO,GAAP;AACD,CAJD;;AAMA,eAAeJ,kBAAf;AAEA,OAAO,eAAeK,kBAAf,CAAkC;AAAEC,EAAAA,GAAF;AAAOC,EAAAA;AAAP,CAAlC,EAAgD;AACrD,QAAMC,OAAO,GAAG,MAAMC,KAAK,CAACC,UAAN,CAAiBJ,GAAjB,CAAtB;;AACA,MAAIE,OAAJ,EAAa;AACX,UAAMG,KAAK,GAAG,IAAIC,IAAJ,EAAd;AACA,QAAIC,QAAQ,GAAG,IAAID,IAAJ,CAASD,KAAK,CAACG,WAAN,EAAT,EAA8BH,KAAK,CAACI,QAAN,EAA9B,EAAgD,CAAhD,CAAf;AACA,QAAIC,OAAO,GAAG,IAAIJ,IAAJ,CAASD,KAAK,CAACG,WAAN,EAAT,EAA8BH,KAAK,CAACI,QAAN,KAAmB,CAAjD,EAAoD,CAApD,CAAd;AACAF,IAAAA,QAAQ,GAAGd,KAAK,CAACc,QAAD,CAAL,CAAgBI,MAAhB,CAAuB,YAAvB,CAAX;AACAD,IAAAA,OAAO,GAAGjB,KAAK,CAACiB,OAAD,CAAL,CAAeC,MAAf,CAAsB,YAAtB,CAAV;AACA,UAAMC,IAAI,GAAG,MAAMC,KAAK,CAAC,+BAAD,EAAkC;AACxDC,MAAAA,MAAM,EAAE,MADgD;AAExDC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEPC,QAAAA,MAAM,EAAE,kBAFD;AAGPC,QAAAA,aAAa,EACX;AAJK,OAF+C;AAQxDC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,QAAAA,KAAK,EAAG;AAChB;AACA;AACA;AACA;AACA;AAN2B,OAAf;AARkD,KAAlC,CAAxB;AAiBA,UAAMC,cAAc,GAAG,MAAMV,IAAI,CAACW,IAAL,EAA7B;AACA,UAAMzB,YAAY,GAAG0B,QAAQ,CAACF,cAAc,CAACV,IAAf,CAAoBa,wBAArB,CAA7B;AACA,QAAIC,MAAM,GAAG,IAAb;;AACA,QAAIJ,cAAc,CAACI,MAAnB,EAA2B;AACzBA,MAAAA,MAAM,GAAGJ,cAAc,CAACI,MAAxB;AACD;;AACD,QAAI5B,YAAJ,EAAkB;AAChB,aAAO;AACLH,QAAAA,KAAK,EAAE;AACL+B,UAAAA,MADK;AAELC,UAAAA,IAAI,EAAEzB,OAAO,CAACyB,IAFT;AAGLf,UAAAA,IAAI,EAAEd;AAHD;AADF,OAAP;AAOD,KARD,MAQO;AACL,aAAO;AACLH,QAAAA,KAAK,EAAE;AACL+B,UAAAA,MADK;AAELC,UAAAA,IAAI,EAAEzB,OAAO,CAACyB,IAFT;AAGLf,UAAAA,IAAI,EAAE;AAHD;AADF,OAAP;AAOD;AACF;;AAED,SAAO;AACLjB,IAAAA,KAAK,EAAE;AACLgC,MAAAA,IAAI,EAAE,oBADD;AAELf,MAAAA,IAAI,EAAE;AAFD;AADF,GAAP;AAMD","sourcesContent":["import dayjs from 'dayjs'\r\n\r\nconst MensalidadesResumo = (props) => {\r\n\r\n  console.log(mensalidades)\r\n  return 120\r\n}\r\n\r\nexport default MensalidadesResumo\r\n\r\nexport async function getServerSideProps({ req, res }) {\r\n  const session = await auth0.getSession(req)\r\n  if (session) {\r\n    const cdate = new Date();\r\n    let firstDay = new Date(cdate.getFullYear(), cdate.getMonth(), 1);\r\n    let lastDay = new Date(cdate.getFullYear(), cdate.getMonth() + 1, 0);\r\n    firstDay = dayjs(firstDay).format('YYYY-MM-DD')\r\n    lastDay = dayjs(lastDay).format('YYYY-MM-DD')\r\n    const data = await fetch('http://localhost:3001/graphql', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Accept: 'application/json',\r\n        Authorization:\r\n          'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjbGllbnQiOiJmcm9udC1lbmQtS2U0Z3JnNzRocjRkY2I2IiwiaWF0IjoxNTk3ODU3NTg2fQ.MVQIQxXkVgbhCFzYRwIiAtJZHbYN0UqiJGBndMLKAGY',\r\n      },\r\n      body: JSON.stringify({\r\n        query: `{\r\n          findMensalidadesByPeriod(user:\"philippe.bjj@gmail.com\",input:{\r\n            idate: \"2020-11-01\"\r\n            fdate: \"2020-11-30\"\r\n          })\r\n        }`,\r\n      }),\r\n    })\r\n    const mensalidadesDB = await data.json()\r\n    const mensalidades = parseInt(mensalidadesDB.data.findMensalidadesByPeriod)\r\n    let errors = null\r\n    if (mensalidadesDB.errors) {\r\n      errors = mensalidadesDB.errors\r\n    }\r\n    if (mensalidades) {\r\n      return {\r\n        props: {\r\n          errors,\r\n          user: session.user,\r\n          data: mensalidades,\r\n        },\r\n      }\r\n    } else {\r\n      return {\r\n        props: {\r\n          errors,\r\n          user: session.user,\r\n          data: [],\r\n        },\r\n      }\r\n    }\r\n  }\r\n\r\n  return {\r\n    props: {\r\n      user: 'Usuário não logado',\r\n      data: 'Dados inacessíveis',\r\n    },\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}